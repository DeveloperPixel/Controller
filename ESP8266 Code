#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

// Wi-Fi credentials
const char *ssid = "your Wi-Fi SSID";       // Replace with your Wi-Fi SSID
const char *password = "your Wi-Fi password"; // Replace with your Wi-Fi password

// Motor Pins
int motor1Pin1 = 12; // D6
int motor1Pin2 = 14; // D5
int enable1Pin = 13; // D7

int motor2Pin1 = 5;  // D1
int motor2Pin2 = 4;  // D2
int enable2Pin = 15; // D8

// Ultrasonic sensor pins
int trigPin = 2; // D4
int echoPin = 0; // D3

// Default speed value
int speed = 255;
long distance = 0;

// ESP8266 Web Server
ESP8266WebServer server(80);

// Function to measure distance
float getDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH, 30000); // 30ms timeout
  if (duration == 0) {
    return -1; // Indicate out of range
  }
  return (duration * 0.034) / 2; // Calculate distance in cm
}

// Function to handle distance requests
void handleDistance() {
  float distance = getDistance();
  Serial.print(distance);
  if (distance != -1) {
    server.send(200, "text/plain", String(distance) + " cm");
  } else {
    server.send(200, "text/plain", "Out of range");
  }
}

void EmergencyStop(){
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
  analogWrite(enable1Pin, 0);
  analogWrite(enable2Pin, 0);
  server.send(200,"text/plain","Brakes Applied!");
}

// Function to handle speed control
void handleSetSpeed() {
  if (server.hasArg("level")) {
    int level = server.arg("level").toInt();
    switch (level) {
      case 1: speed = 550; break;
      case 2: speed = 650; break;
      case 3: speed = 800; break;
      case 4: speed = 900; break;
      default: speed = 550; // Default to level 1
    }
    analogWrite(enable1Pin, speed);
    analogWrite(enable2Pin, speed);
    server.send(200, "text/plain", "Speed level set to: " + String(level));
  } else {
    server.send(400, "text/plain", "Speed level missing");
  }
}

// Function to handle motor commands
void handleCommand() {
  String command = server.arg("cmd");
  Serial.print(command);
  if (command == "/forward") {
    digitalWrite(motor1Pin1, LOW);
    digitalWrite(motor1Pin2, HIGH);
    digitalWrite(motor2Pin1, HIGH);
    digitalWrite(motor2Pin2, LOW);
  } else if (command == "/backward") {
    digitalWrite(motor1Pin1, HIGH);
    digitalWrite(motor1Pin2, LOW);
    digitalWrite(motor2Pin1, LOW);
    digitalWrite(motor2Pin2, HIGH);
  } else if (command == "/left") {
    digitalWrite(motor1Pin1, LOW);
    digitalWrite(motor1Pin2, HIGH);
    digitalWrite(motor2Pin1, LOW);
    digitalWrite(motor2Pin2, HIGH);
  } else if (command == "/right") {
    digitalWrite(motor1Pin1, HIGH);
    digitalWrite(motor1Pin2, LOW);
    digitalWrite(motor2Pin1, HIGH);
    digitalWrite(motor2Pin2, LOW);
  } else if (command == "/stop") {
    digitalWrite(motor1Pin1, LOW);
    digitalWrite(motor1Pin2, LOW);
    digitalWrite(motor2Pin1, LOW);
    digitalWrite(motor2Pin2, LOW);
  }
  server.send(200, "text/plain", "Command executed: " + command);
}

void setup() {
  // Initialize motor and ultrasonic sensor pins
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(enable1Pin, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(enable2Pin, OUTPUT);

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.println("Connecting to Wi-Fi...");

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("Connected to Wi-Fi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  server.on("/status", []() {
    Serial.print("added");
    server.send(200, "text/plain", "ESP is online");
  });

  server.on("/setSpeed", HTTP_GET, handleSetSpeed);
  server.on("/command", HTTP_GET, handleCommand);
  server.on("/distance", HTTP_GET, handleDistance);
  server.on("/EmergencyStop", HTTP_GET, EmergencyStop);

  server.begin();
  Serial.println("Server started");
}

void loop() {
  server.handleClient();

  float distance = getDistance();
  Serial.print(distance);
  if (distance <= 50 && distance >=0 ) {
    digitalWrite(motor1Pin1, LOW);
    digitalWrite(motor1Pin2, LOW);
    digitalWrite(motor2Pin1, LOW);
    digitalWrite(motor2Pin2, LOW);
    server.send(200, "text/plain", "Stopped Due to Obstacle.");
  }
}
